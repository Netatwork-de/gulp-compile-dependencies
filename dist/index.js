'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.executeGulp = executeGulp;
exports.executeJspm = executeJspm;
exports.executeNpm = executeNpm;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

let Promise = require('rsvp').Promise;
let asp = require('rsvp').denodeify;
let fs = require('graceful-fs');
let path = require('path');
let gutil = require('gulp-util');
let spawn = require('child_process').spawn;

let dependencyPath = 'jspm_packages/local';

let getPackageObject = function () {
	var ref = _asyncToGenerator(function* (packageFile) {
		try {
			let lookupJSON = yield asp(fs.readFile)(packageFile);
			return JSON.parse(lookupJSON.toString());
		} catch (e) {
			if (e.code == 'ENOENT' || e instanceof SyntaxError) return { notfound: true };
			throw e;
		}
	});

	return function getPackageObject(_x) {
		return ref.apply(this, arguments);
	};
}();

function fileExists(filepath) {
	if (!filepath) return false;

	try {
		return fs.statSync(filepath).isFile();
	} catch (e) {
		return false;
	}
}

let processDependency = function () {
	var ref = _asyncToGenerator(function* (packagePath) {
		let packageName = packagePath.substring(0, packagePath.indexOf('@'));
		gutil.log("Compiling package", gutil.colors.yellow(packageName));

		let project = yield getPackageObject(path.resolve('..', path.join(packageName, 'package.json')));
		let projectPath = path.resolve(path.join("..", packageName));

		yield executeNpm(projectPath, "install");

		let isJspmPresent = project.devDependencies !== undefined && project.devDependencies["jspm"] != null;
		if (isJspmPresent) {
			gutil.log(gutil.colors.yellow("jspm"), "is configured in this package. Running", gutil.colors.yellow("jspm install"));
			yield executeJspm(projectPath);
		}

		if (fileExists(path.join(projectPath, "gulpfile.js"))) {
			gutil.log(gutil.colors.yellow("gulp"), "is configured in this package. Running", gutil.colors.yellow("gulp build"));
			yield executeGulp(projectPath);
		}
	});

	return function processDependency(_x2) {
		return ref.apply(this, arguments);
	};
}();

function executeGulp(packagePath, tasks) {
	gutil.log("Processing", gutil.colors.yellow("gulp"), "for", gutil.colors.yellow(packagePath));
	return spawnProcess("gulp", packagePath, tasks || ["build"]);
}

function executeJspm(packagePath) {
	gutil.log("Processing", gutil.colors.yellow("jspm"), "for", gutil.colors.yellow(packagePath));
	return spawnProcess("jspm", packagePath || path.resolve("."), ["install"]);
}

function executeNpm(packagePath, action) {
	gutil.log("Processing", gutil.colors.yellow("npm"), "for", gutil.colors.yellow(packagePath));
	return spawnProcess("npm", packagePath || path.resolve("."), [action || "install"]);
}

function spawnProcess(command, workingDirectory, args) {
	let runningOnWindows = /^win/.test(process.platform);
	let nodeModulesPath = path.join(workingDirectory, 'node_modules', '.bin');
	let envCopy = {};
	for (let e in process.env) envCopy[e] = process.env[e];

	if (runningOnWindows) {
		envCopy.Path += ';' + nodeModulesPath;
	} else {
		envCopy.PATH += ':' + nodeModulesPath;
	}

	let opts = {
		cwd: workingDirectory,
		env: envCopy,
		stdio: 'inherit',
		stderr: 'inherit'
	};
	let commandToExecute = command;

	if (runningOnWindows) {
		args = ['/s', '/c', command + ".cmd"].concat(args);
		commandToExecute = 'cmd';

		opts.windowsVerbatimArguments = true;
	}

	return new Promise((resolve, reject) => {
		let proc = spawn(commandToExecute, args, opts);
		proc.on('close', function (code) {
			let error;

			if (code == 0) {
				resolve();
				return;
			}
			error = new gutil.PluginError(`${ command } on ${ packagePath } returned ${ code }`);
			reject(error);
		});
	});
}

function isDirectory(fileName) {
	let filePath = path.resolve(dependencyPath, fileName);
	return fs.lstatSync(filePath).isDirectory();
}

let getLocalDependencies = function () {
	var ref = _asyncToGenerator(function* () {
		let packageConfig = yield getPackageObject("package.json");

		if (!packageConfig.jspm || !packageConfig.jspm.dependencies) throw "package.json does have jspm configured.";

		let localDepedencies = [];

		var dependencies = packageConfig.jspm.dependencies;
		for (let dependency in dependencies) {
			var value = dependencies[dependency];
			if (value.indexOf("local:") == 0) {
				localDepedencies.push(value.subString("local:".length));
			}
		}
		return localDepedencies;
	});

	return function getLocalDependencies() {
		return ref.apply(this, arguments);
	};
}();

let buildDependencies = exports.buildDependencies = function () {
	var ref = _asyncToGenerator(function* () {
		gutil.log("Building local dependencies");
		let dependencies = getLocalDependencies();
		for (let entry of dependencies) {
			yield processDependency(entry);
		}
	});

	return function buildDependencies() {
		return ref.apply(this, arguments);
	};
}();
//# sourceMappingURL=data:application/json;base64,
