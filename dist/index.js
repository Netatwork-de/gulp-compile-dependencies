'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

let Promise = require('rsvp').Promise;
let asp = require('rsvp').denodeify;
let fs = require('graceful-fs');
let path = require('path');
let gutil = require('gulp-util');
let spawn = require('child_process').spawn;

let dependencyPath = 'jspm_packages/local';

let getPackageObjectAsync = function () {
	var ref = _asyncToGenerator(function* (repo) {
		let packageFile = path.resolve('..', path.join(repo, 'package.json'));

		try {
			let lookupJSON = yield asp(fs.readFile)(packageFile);
			return JSON.parse(lookupJSON.toString());
		} catch (e) {
			if (e.code == 'ENOENT' || e instanceof SyntaxError) return { notfound: true };
			throw e;
		}
	});

	return function getPackageObjectAsync(_x) {
		return ref.apply(this, arguments);
	};
}();

function fileExists(filepath) {
	if (!filepath) return false;

	try {
		return fs.statSync(filepath).isFile();
	} catch (e) {
		return false;
	}
}

let processDependencyAsync = function () {
	var ref = _asyncToGenerator(function* (packagePath) {
		let packageName = packagePath.substring(0, packagePath.indexOf('@'));
		gutil.log("Compiling package", gutil.colors.yellow(packageName));

		let project = yield getPackageObjectAsync(packageName);
		let projectPath = path.resolve(path.join("..", packageName));

		yield executeNpmAsync(projectPath, "install");

		let isJspmPresent = project.devDependencies !== undefined && project.devDependencies["jspm"] != null;
		if (isJspmPresent) {
			gutil.log(gutil.colors.yellow("jspm"), "is configured in this package. Running", gutil.colors.yellow("jspm install"));
			yield executeJspmAsync(projectPath);
		}

		if (fileExists(path.join(projectPath, "gulpfile.js"))) {
			gutil.log(gutil.colors.yellow("gulp"), "is configured in this package. Running", gutil.colors.yellow("gulp build"));
			yield executeGulpAsync(projectPath, "build");
		}
	});

	return function processDependencyAsync(_x2) {
		return ref.apply(this, arguments);
	};
}();

function executeGulpAsync(packagePath, tasks) {
	gutil.log("Processing", gutil.colors.yellow("gulp"), "for", gutil.colors.yellow(packagePath));
	return spawnProcessAsync("gulp", packagePath, ["build"]);
}

function executeJspmAsync(packagePath) {
	gutil.log("Processing", gutil.colors.yellow("jspm"), "for", gutil.colors.yellow(packagePath));
	return spawnProcessAsync("jspm", packagePath, ["install"]);
}

function executeNpmAsync(packagePath, action) {
	gutil.log("Processing", gutil.colors.yellow("npm"), "for", gutil.colors.yellow(packagePath));
	return spawnProcessAsync("npm", packagePath, ["install"]);
}

function spawnProcessAsync(command, workingDirectory, args) {
	let runningOnWindows = /^win/.test(process.platform);
	let nodeModulesPath = path.join(workingDirectory, 'node_modules', '.bin');
	let envCopy = {};
	for (let e in process.env) envCopy[e] = process.env[e];

	if (runningOnWindows) {
		envCopy.Path += ';' + nodeModulesPath;
	} else {
		envCopy.PATH += ':' + nodeModulesPath;
	}

	let opts = {
		cwd: workingDirectory,
		env: envCopy,
		stdio: 'inherit',
		stderr: 'inherit'
	};
	let commandToExecute = command;

	if (runningOnWindows) {
		args = ['/s', '/c', command + ".cmd"].concat(args);
		commandToExecute = 'cmd';

		opts.windowsVerbatimArguments = true;
	}

	return new Promise((resolve, reject) => {
		let proc = spawn(commandToExecute, args, opts);
		proc.on('close', function (code) {
			let error;

			if (code == 0) {
				resolve();
				return;
			}
			error = new gutil.PluginError(`${ command } on ${ packagePath } returned ${ code }`);
			reject(error);
		});
	});
}

function isDirectory(fileName) {
	let filePath = path.resolve(dependencyPath, fileName);
	return fs.lstatSync(filePath).isDirectory();
}

let buildDependencies = function () {
	var ref = _asyncToGenerator(function* () {
		gutil.log("Building local dependencies");
		let files = yield asp(fs.readdir)(dependencyPath);
		for (let entry of files) {
			if (isDirectory(entry)) {
				yield processDependencyAsync(entry);
			}
		}
	});

	return function buildDependencies() {
		return ref.apply(this, arguments);
	};
}();

module.exports = buildDependencies;
//# sourceMappingURL=data:application/json;base64,
